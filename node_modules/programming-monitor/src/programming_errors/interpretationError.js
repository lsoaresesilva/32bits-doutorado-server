"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.InterpretationError = void 0;
var errorCategory_1 = require("../enum/errorCategory");
/* Every error found in the Python traceback is represented as an instance of InterpretationError subclass. */
var InterpretationError = /** @class */ (function () {
    function InterpretationError(traceback) {
        this.traceback = traceback;
        this.line = InterpretationError.getLine(traceback);
        this.category = InterpretationError.getCategory(traceback);
    }
    InterpretationError.getLine = function (traceback) {
        if (traceback != null) {
            var pattern = /line ([0-9]+)/;
            var match = traceback.match(pattern);
            if (match != null) {
                return parseInt(match[1]);
            }
        }
        throw new Error("Could not identify error line.");
    };
    InterpretationError.isErro = function (traceback) {
        if (traceback != null) {
            var padrao = /([a-zA-Z]+)Error:/;
            var consulta = traceback.match(padrao);
            if (consulta != null) {
                return true;
            }
        }
        return false;
    };
    /**
     * Every error belongs to a category
     * @param traceback
     */
    InterpretationError.getCategory = function (traceback) {
        if (traceback != null) {
            var padrao = /([a-zA-Z]+Erro[a-z]+):/;
            var consulta = traceback.match(padrao);
            if (consulta != null) {
                if (consulta[1] == "NameError") {
                    return errorCategory_1.ErrorCategory.nameError;
                }
                else if (consulta[1] == "SyntaxError") {
                    return errorCategory_1.ErrorCategory.syntaxError;
                }
                else if (consulta[1] == "TypeError") {
                    return errorCategory_1.ErrorCategory.typeError;
                }
                else if (consulta[1] == "IndentationError") {
                    return errorCategory_1.ErrorCategory.indentationError;
                }
            }
        }
        throw new Error("Could not identify error category.");
    };
    return InterpretationError;
}());
exports.InterpretationError = InterpretationError;
